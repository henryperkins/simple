{"d1e482763c41b7c19be466db5a09e897c393927be2cffab5a527c7994c0c8aab": {"value": {"summary": "Manages docstring operations for source code files.", "args": [{"name": "self", "type": "DocStringManager", "description": "An instance of DocStringManager."}, {"name": "source_code", "type": "str", "description": "The source code to manage docstrings for."}, {"name": "output_dir", "type": "str", "description": "The directory where the generated documentation will be stored."}], "returns": {"type": "None", "description": "This class does not return any value as its methods perform in-place updates."}, "raises": [{"exception": "TypeError", "description": "Raised if provided non-string docstring inputs."}, {"exception": "ValueError", "description": "Raised if there are errors during AST parsing or docstring validation."}, {"exception": "FileNotFoundError", "description": "Raised if a specified file or directory does not exist."}, {"exception": "IsADirectoryError", "description": "Raised if a specified file path is actually a directory."}, {"exception": "Exception", "description": "General exception for any unexpected errors during processing."}], "description": "The `DocStringManager` class provides functionalities to manage and manipulate docstrings within Python source code files. It leverages the capabilities of the Python Abstract Syntax Tree (AST) to traverse and modify the source code structure based on the given docstring entries, ensuring that docstrings are valid before insertion. The class is equipped with a docstring validator for error detection and correction, aiming to maintain high code documentation standards.\nThe DocumentationManager class is designed to automate the documentation generation process for Python projects. It takes Python source files, extracts their docstrings, and converts them into markdown format. It supports processing individual files as well as entire directories, and organizes the output in a structured manner. Additionally, it provides logging capabilities to track the documentation process, error handling to manage exceptions, and features to save the generated documentation to files and generate an index for quick navigation.", "metadata": {}, "complexity": 14, "validation_status": true, "validation_errors": []}, "timestamp": 1733869990.291046}, "21a1c2452272b7a760c000966bb2b3b89434b3deffbc4a54f607c0509e4d4489": {"value": {"summary": "Generate markdown documentation from code elements.", "args": [{"name": "text", "type": "str", "description": "Header text for the markdown document."}, {"name": "level", "type": "int", "description": "Header level, ranging from 1 to 6."}, {"name": "code", "type": "str", "description": "The code to be included in the markdown document."}, {"name": "language", "type": "str", "description": "Programming language for syntax highlighting in code blocks."}, {"name": "title", "type": "str", "description": "Title of the section to be added."}, {"name": "content", "type": "str", "description": "Content of the section to be added."}, {"name": "output_dir", "type": "str", "description": "Directory path where the generated documentation files will be saved."}], "returns": {"type": "str", "description": "The final markdown document as a string."}, "raises": [{"exception": "ValueError", "description": "Raised if the provided header level is outside the range of 1 to 6."}, {"exception": "TypeError", "description": "Raised if the input parameters do not match the specified types."}, {"exception": "FileNotFoundError", "description": "Raised when a provided file or directory path does not exist."}, {"exception": "PermissionError", "description": "Raised if there is insufficient permission to read files or write to directories."}, {"exception": "SyntaxError", "description": "Raised when there is a syntax error in the Python files being processed."}, {"exception": "Exception", "description": "General exception handling for unexpected errors during processing."}], "description": "This class, `MarkdownGenerator`, provides an interface for generating markdown documentation from Python code elements. It supports functionalities such as adding headers, code blocks, and sections to the markdown output. The final markdown document can be generated as a string for further use or saving to a file.\nThe DocumentationManager class is designed to process Python source files and directories to generate markdown documentation. It includes methods to read Python files, extract docstrings, process the abstract syntax tree (AST) to document classes and functions, and save the generated documentation to specified output directories. This process includes the creation of an index for easy navigation of generated documentation. Logging is integrated throughout the class to offer detailed insight into operations, errors, or important actions.", "metadata": {}, "complexity": 1, "validation_status": true, "validation_errors": []}, "timestamp": 1733870188.7931018}, "74be8cfbede7705dcd4351f33de6bb498edec5892aeaeb08313f1f46919d1761": {"value": {"summary": "Generates markdown documentation from Python code elements.", "args": [{"name": "text", "type": "str", "description": "Header text to be added to the markdown document."}, {"name": "level", "type": "int", "description": "Header level ranging from 1 to 6, indicating the markdown header size."}, {"name": "code", "type": "str", "description": "Code snippet to be added as a block in the markdown document."}, {"name": "language", "type": "str", "description": "Programming language of the code block, used for syntax highlighting."}, {"name": "title", "type": "str", "description": "Title of the section to be added in the markdown document."}, {"name": "content", "type": "str", "description": "Content of the section to be included under the specified title."}, {"name": "output_dir", "type": "str", "description": "Directory path where the output documentation will be stored."}], "returns": {"type": "str", "description": "The generated markdown document as a complete string."}, "raises": [{"exception": "ValueError", "description": "Raised when an invalid header level is passed (outside the range of 1-6)."}, {"exception": "FileNotFoundError", "description": "Raised if a file or directory doesn't exist."}, {"exception": "PermissionError", "description": "Raised if there are insufficient permissions to read a file or write to a directory."}, {"exception": "IOError", "description": "Raised if an error occurs reading from or writing to a file."}, {"exception": "SyntaxError", "description": "Raised if a Python file has syntax errors preventing parsing."}], "description": "This class is responsible for creating and managing markdown documentation by assembling Python code elements into markdown format. It primarily deals with adding headers, code blocks, and sections to the markdown document, ultimately generating the completed markdown string.\nThe DocumentationManager class facilitates the generation of markdown documentation from Python source files. It processes individual files or entire directories, extracts docstrings from classes and functions, and then formats this information into markdown syntax. Generated documentation can be saved to specified directory paths, and an index page for all documentation files can be created. The class is equipped with logging to track and debug the documentation generation process.", "metadata": {}, "complexity": 1, "validation_status": true, "validation_errors": []}, "timestamp": 1733870342.420414}, "1e038eaedd627bcee63f30d85f9eb993e280b09fecba321568521972770024f6": {"value": {"summary": "Validates Python docstrings with type checking.", "args": [{"name": "self", "type": "DocstringValidator", "description": "The instance of the DocstringValidator class."}, {"name": "docstring_data", "type": "Dict[str, Any]", "description": "A dictionary containing keys such as 'summary', 'parameters', 'returns', which represent parts of a valid docstring."}, {"name": "node", "type": "ast.AST", "description": "The Abstract Syntax Tree (AST) node that represents the code element for which the docstring is being analyzed."}, {"name": "docstring", "type": "str", "description": "The docstring string that needs to be parsed, validated, and potentially fixed."}, {"name": "parsed_data", "type": "object", "description": "The docstring data that has been parsed and is to be validated."}, {"name": "fix_changes", "type": "list", "description": "A list of changes to be applied to the parsed_data if fixes are necessary."}], "returns": {"type": "Tuple[bool, List[str]]", "description": "Returns a tuple where the first element is a boolean indicating whether the docstring is valid or not, and the second element is a list of errors found during validation."}, "raises": [{"exception": "ValidationError", "description": "Raised if the JSON schema validation fails."}, {"exception": "KeyError", "description": "Raised if there are missing required fields in docstring data."}, {"exception": "ValueError", "description": "Raised when an invalid type expression is encountered during evaluation."}, {"exception": "Exception", "description": "Raised when an error occurs during the docstring processing."}], "description": "The `DocstringValidator` class provides comprehensive functionality to validate Python docstrings. It checks for adherence to a predefined schema, ensuring that the docstring contains required fields such as summary, parameters, and returns. It also validates the type strings used within the docstring, ensuring they conform to acceptable patterns or formats. The validator offers specific methods to validate generic types, unions, optionals, content quality, and exception names. Logger functionality is integrated for debugging and error messages.\nThis code module includes multiple functions aimed at handling, parsing, validating, and fixing Python docstrings. The functions ensure that docstrings are well-structured, adhere to standard formatting guidelines, and contain all necessary sections such as summary, parameters, return type, exceptions, and examples. It also utilizes regex patterns to detect and fix common issues, such as improper section headers and excessive blank lines.\nThis function is responsible for validating a provided docstring using a validator object. If any fixes are specified, they are applied, and corresponding messages are added to a list of validation errors. If the docstring is deemed valid after validation and potential fixes, the function returns the parsed data along with any validation errors. In case of an exception during processing, an error is logged and returned.", "metadata": {}, "complexity": 43, "validation_status": true, "validation_errors": []}, "timestamp": 1733870357.422604}, "d8e4c38b07ce237c3dc5ca1fa5530854d58e2af6be9aa9261812899c4263162d": {"value": {"summary": "Defines data structures for docstring components.", "args": [], "returns": {"type": "None", "description": "This module does not return any value; it defines classes and structures for use in docstring documentation."}, "raises": [], "description": "This module provides classes and types that represent various components of a function's or class's docstring. It encapsulates information such as parameters, return values, exceptions, notes, and examples by utilizing Python's TypedDict and Enum. The structures ensure type safety and facilitate the comprehensive and organized documentation of code components.", "metadata": {}, "complexity": 1, "validation_status": true, "validation_errors": []}, "timestamp": 1733870364.3397963}, "68d4f15755929e0ecb2e4d420f538b95424db76c1b4506bf8a63793e264d469f": {"value": {"summary": "Handles the overall operation of generating documentation with caching, monitoring, and error management.", "args": [{"name": "class_info", "type": "dict", "description": "Information about the class, including its name and existing docstring."}, {"name": "function_node", "type": "Optional[ast.FunctionDef]", "description": "The function node to generate a unique cache key for."}], "returns": {"type": "None", "description": "This function does not return any value."}, "raises": [{"exception": "Exception", "description": "Raised if there is an error during the processing of class information or generation of a cache key."}], "description": "This class is tasked with the orchestration of generating docstrings for Python functions and classes. It integrates with caching mechanisms, monitors performance, handles errors, and interacts with the Azure OpenAI API to retrieve docstring content. It is designed to process code elements in batches, which helps optimize the efficiency of API calls and handle many functions or classes at once. The cached results are validated before being used to ensure accuracy and consistency. This class aims to streamline and automate the documentation process in a scalable manner.\nThis code contains methods for processing class information to generate docstrings and for generating cache keys for functions. The first method attempts to generate a docstring for a given class using an external client. If the response is successful, it returns the generated docstring and metadata; otherwise, it returns None. The second method generates a unique cache key for a function node. It uses the function's name and arguments to create a signature, which is then hashed using MD5 to ensure a unique identifier. In case of any exceptions, it logs the error and returns a timestamp-based hash.", "metadata": {}, "complexity": 36, "validation_status": true, "validation_errors": []}, "timestamp": 1733870372.8793564}, "b009308a0956bef8862c85a07ab7c4fd6fda53193e2d2af5a3eb4ddaaad994d9": {"value": {"summary": "A module for handling and validating Python docstrings using utilities from docstring_utils.", "args": [{"name": "DocstringValidator", "type": "class", "description": "A class for validating docstrings against specific formats and standards."}, {"name": "parse_docstring", "type": "function", "description": "Parses a raw docstring into its structural components."}, {"name": "_process_sections", "type": "function", "description": "Processes different sections of a docstring, such as parameters and returns."}, {"name": "_parse_parameters", "type": "function", "description": "Extracts and validates the parameters section from a docstring."}, {"name": "_parse_returns", "type": "function", "description": "Extracts and validates the returns section from a docstring."}, {"name": "_parse_raises", "type": "function", "description": "Extracts and validates the exceptions section from a docstring."}, {"name": "_parse_examples", "type": "function", "description": "Extracts and validates the examples section from a docstring."}, {"name": "analyze_code_element_docstring", "type": "function", "description": "Analyzes the docstring of a given code element to determine its completeness and correctness."}, {"name": "validate_and_fix_docstring", "type": "function", "description": "Validates the provided docstring and fixes any errors or issues found."}, {"name": "parse_and_validate_docstring", "type": "function", "description": "Combines parsing and validation of a docstring to ensure overall compliance."}], "returns": {"type": "None", "description": "This module does not return a value as it mainly provides tools and classes for docstring handling."}, "raises": [{"exception": "DocstringValidationError", "description": "Raised when a docstring does not comply with the required standards and cannot be automatically fixed."}, {"exception": "ParseError", "description": "Raised during parsing if the docstring structure is invalid or unrecognized."}], "description": "The test_docstring_utils module provides various functions and classes to analyze, validate, and manipulate Python docstrings. It leverages utilities from the docstring_utils package to ensure that docstrings conform to best practices and standards. This module integrates functions for parsing different sections of a docstring, validating their compliance, and fixing any detected issues. The module supports analyzing an entire code element's docstring, validating it, and ensuring it is well-formed and complete.", "metadata": {}, "complexity": 4, "validation_status": true, "validation_errors": []}, "timestamp": 1733870378.2773354}}